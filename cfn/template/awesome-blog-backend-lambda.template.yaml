AWSTemplateFormatVersion: '2010-09-09'
Description: Create Lambda for backend

Parameters:
  ServiceName:
    Type: String
    Default: 'awesome-blog'
  Environment:
    Type: String
    AllowedValues:
      - dev
      - stg
      - prd
  ArtifactBucket:
    Type: String
  ArtifactKey:
    Type: String

Resources:
  BackendApiFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ '-', [ !Ref ServiceName, !Ref Environment, 'backend-api-lambda-role' ] ]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: !Join [ '-', [ !Ref ServiceName, !Ref Environment, 'backend-api-lambda-dynamo-access-policy' ] ]
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:UpdateItem'
                Resource:
                  Fn::Join:
                    - '/'
                    - - Fn::Join:
                          - ':'
                          - - 'arn:aws:dynamodb'
                            - !Ref AWS::Region
                            - !Ref AWS::AccountId
                            - 'table'
                      - !Join [ '-', [ !Ref ServiceName, !Ref Environment, '*' ] ]
      MaxSessionDuration: 3600

  BackendApiFunction:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - x86_64
      FunctionName: !Join [ '-', [ !Ref ServiceName, !Ref Environment, 'backend-api' ] ]
      # Custom runtime (Amazonlinux2)
      Runtime: provided.al2
      Code:
        S3Bucket: !Ref ArtifactBucket
        S3Key: !Ref ArtifactKey
      Handler: hello.handler
      Role: !GetAtt BackendApiFunctionRole.Arn
      MemorySize: 128
      Timeout: 15

  BackendApiFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join [ '', [ '/aws/lambda/', !Ref BackendApiFunction ] ]
      RetentionInDays: 7

Outputs:
  BackendApiFunction:
    Value: !Ref BackendApiFunction
